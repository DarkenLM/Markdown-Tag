/* MarkdownTag v1.0.0 - Built at: 2022-07-06T16:00:07.043Z */
var e=(()=>{const a="DOMContentLoaded",h=new WeakMap,s=[],E=e=>{do{if(e.nextSibling)return!0}while(e=e.parentNode);return!1},u=()=>{s.splice(0).forEach(e=>{!0!==h.get(e[0])&&(h.set(e[0],!0),e[0][e[1]]())})};document.addEventListener(a,u);class e extends HTMLElement{static withParsedCallback(e,t="parsed"){var i=e.prototype;const n=i.connectedCallback,r=t+"Callback",d=(e,t,i,s)=>{t.disconnect(),i.removeEventListener(a,s),o(e)},o=e=>{s.length||requestAnimationFrame(u),s.push([e,r])};return Object.defineProperties(i,{connectedCallback:{configurable:!0,writable:!0,value(){if(n&&n.apply(this,arguments),r in this&&!h.has(this)){const e=this,t=e.ownerDocument;if(h.set(e,!1),"complete"===t.readyState||E(e))o(e);else{const i=()=>d(e,s,t,i),s=(t.addEventListener(a,i),new MutationObserver(()=>{E(e)&&d(e,s,t,i)}));s.observe(e.parentNode,{childList:!0,subtree:!0})}}}},[t]:{configurable:!0,get(){return!0===h.get(this)}}}),e}}return e.withParsedCallback(e)})();{class t extends e{#componentID;#input;constructor(){super(),this.#componentID="MDTAG-"+Date.now()+(Math.floor(999*Math.random())+1),this.#input=null,this.generated=!1,this.defaultFlavor="showdown",this.defaultParserRoot="./",this.flavors=["commonmark","github","marked","showdown"],this.logRegister=[],this.debugger=null,this.shadow=this.attachShadow({mode:"open"}),this.headID="md-tag-head-"+Date.now()+(Math.floor(999*Math.random())+1);const e=document.createElement("head");e.id=this.headID,this.shadow.appendChild(e),this.contentObserver=null}get componentID(){return this.#componentID}static get version(){return"1.0.0"}get debugEnabled(){var e=this.getAttribute("debug");return!!this.hasAttribute("debug")&&!!("boolean"==typeof e||"string"==typeof e&&["true","false",!0,!1].includes(e))&&"true"==e}set debugEnabled(e){if(e&&"string"==typeof e||"boolean"==typeof e)if("boolean"==typeof e||"string"==typeof e&&["true","false",!0,!1].includes(e))if(this.setAttribute("debug",e),"true"==e){if(!window?.mdtag?.webcomponent?.hasOwnProperty("debugger"))throw new Error(`[${this.componentID}] Could not initialize debug: MarkdownTag Debugger not installed.`);this._initDebugger(),this.debug("DEBUG Environment enabled.")}else this.debugger=null;else this.setAttribute("debug",!1);else this.setAttribute("debug",!1)}get parserRoot(){return this.hasAttribute("parser_root")?this.getAttribute("parser_root"):this.defaultParserRoot}set parserRoot(e){e&&"string"==typeof e?this.setAttribute("parser_root",e):this.setAttribute("parser_root",this.defaultParserRoot)}get flavor(){return this.hasAttribute("flavor")&&this.flavors.includes(this.getAttribute("flavor"))?this.getAttribute("flavor"):this.defaultFlavor}async setFlavor(e){this.debug("[EVENT_METHOD] [HEAD] [sF] setFlavor"),this.debug("[EVENT_METHOD] [APPLY] [sF] Setting flavor..."),e&&"string"==typeof e&&this.flavors.includes(e)?(this.setAttribute("flavor",e),this.debug("[EVENT_METHOD] [APPLY] [sF] Ensuring generator fields..."),this.generateFields(),this.debug("[EVENT_METHOD] [APPLY] [sF] Generating markdown..."),await this.generateMarkdown()):this.setAttribute("flavor",this.defaultFlavor),this.debug("[EVENT_METHOD] [APPLY] [sF] Finished")}get input(){return this.#input}async setInput(e){this.debug("[EVENT_METHOD] [HEAD] [sI] setInput"),this.debug("[EVENT_METHOD] [APPLY] [sI] Setting input..."),this.#input=e,this.debug("[EVENT_METHOD] [APPLY] [sI] Ensuring generator fields..."),this.generateFields(),this.debug("[EVENT_METHOD] [APPLY] [sI] Generating markdown..."),await this.generateMarkdown(),this.debug("[EVENT_METHOD] [APPLY] [sI] Finished")}addCss(e){this.debug("[EVENT_METHOD] [HEAD] [aC] addCss"),this.debug("[EVENT_METHOD] [APPLY] [aC] Querying Shadow DOM head...");e=this._isPathAbsolute(e)?e:new URL(e,window.location.href);const t=this.shadow.querySelector("#"+this.headID),i=(this.debug("[EVENT_METHOD] [APPLY] [aC] Creating LINK element..."),document.createElement("link"));i.id="md-style-"+Date.now()+(Math.floor(999*Math.random())+1),i.type="text/css",i.rel="stylesheet",i.href=e,this.debug("[EVENT_METHOD] [APPLY] [aC] Appending LINK element to Shadow DOM head..."),t.appendChild(i),this.debug("[EVENT_METHOD] [APPLY] [aC] Finished")}assertStyleSheet(e){this.debug("[EVENT_METHOD] [HEAD] [aSS] assertStyleSheet");var i=this._isPathAbsolute(e)?e:new URL(e,window.location.href),s=this.shadow.styleSheets;for(let e=0,t=s.length;e<t;e++)if(s[e].href===i)return this.debug("[EVENT_METHOD] [APPLY] [aSS] Finished"),!0;return this.debug("[EVENT_METHOD] [APPLY] [aSS] Finished"),!1}async doesFileExist(n){return this.debug("[EVENT_METHOD] [HEAD] [dFE] doesFileExist"),new Promise(async(t,e)=>{if(!n)return this.debug("[EVENT_METHOD] [APPLY] [dFE] File path not provided. Skipping..."),this.debug("[EVENT_METHOD] [APPLY] [dFE] Finished"),t(!1);try{this.debug("[EVENT_METHOD] [APPLY] [dFE] Asserting file path validity...");var i=this._isPathAbsolute(n)?n:new URL(n,window.location.href),s=(this.debug("[EVENT_METHOD] [APPLY] [dFE] File path is valid. Contacting server for file..."),this.debug("[EVENT_METHOD] [APPLY] [dFE] URL: "+i),await fetch(i,{method:"HEAD",mode:"no-cors"}).catch(e=>{this.debug("[EVENT_METHOD] [APPLY] [dFE] ERROR:",e),this.debug("[EVENT_METHOD] [APPLY] [dFE] Finished"),t(!1)}));if(this.debug("[EVENT_METHOD] [APPLY] [dFE] Server responded. Resolving."),this.debug("[EVENT_METHOD] [APPLY] [dFE] Server response:",s),s)return t(200===s?.status);this.debug("[EVENT_METHOD] [APPLY] [dFE] Finished")}catch(e){this.debug("[EVENT_METHOD] [APPLY] [dFE] Could not ensure file existence:",e),this.debug("[EVENT_METHOD] [APPLY] [dFE] Finished"),t(!1)}})}async addJs(d){return this.debug("[EVENT_METHOD] [HEAD] [aJ] addJs"),new Promise(async(e,t)=>{try{this.debug("[EVENT_METHOD] [APPLY] [aJ] Resolving file path...");var i=this._isPathAbsolute(d)?d:new URL(d,window.location.href),s=(this.debug("[EVENT_METHOD] [APPLY] [aJ] URL: "+i),this.debug("[EVENT_METHOD] [APPLY] [aJ] Asserting file existence..."),await this.doesFileExist(i));if(this.debug("[EVENT_METHOD] [APPLY] [aJ] Does file exist:",s),!s)return this.debug("[EVENT_METHOD] [APPLY] [aJ] File does not exist. Skipping."),this.debug("[EVENT_METHOD] [APPLY] [aJ] Finished"),e(!1);this.debug("[EVENT_METHOD] [APPLY] [aJ] Generating Script Tag...");const n=document.head,r=document.createElement("script");r.id="md-script-"+Date.now()+(Math.floor(999*Math.random())+1),r.type="text/javascript",r.src=i,r.addEventListener("load",()=>{this.debug("[EVENT_METHOD] [APPLY] [aJ] Script successfully loaded."),this.debug("[EVENT_METHOD] [APPLY] [aJ] Finished"),e(!0)}),this.debug("[EVENT_METHOD] [APPLY] [aJ] Appending script to Document's head..."),n.appendChild(r)}catch(e){this.debug("[EVENT_METHOD] [APPLY] [aJ] Could not add Script:",e),this.debug("[EVENT_METHOD] [APPLY] [aJ] Finished"),t(e)}})}async ensureMarkdownParser(e){if(this.debug("[EVENT_METHOD] [APPLY] [eMP] ensureMarkdownParser with arguments",[...arguments]),this.debugEnabled&&!e&&this.debug("[EVENT_METHOD] [APPLY] [eMP] Parser not provided. Skipping."),!e)return!1;switch(e){case"showdown":if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Asserting parser 'SHOWDOWN's existence..."),window.hasOwnProperty("showdown"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] 'SHOWDOWN' already exists."),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;this.debug("[EVENT_METHOD] [APPLY] [eMP] 'SHOWDOWN' does not exist.");try{this.debug("[EVENT_METHOD] [APPLY] [eMP] Attempting to load local copy of 'SHOWDOWN'..."),await this.addJs(`${this.parserRoot.endsWith("/")?this.parserRoot.slice(0,-1):this.parserRoot}/showdown/showdown.min.js`).catch(e=>{throw e})}catch(e){if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Local copy of 'SHOWDOWN' does not exist. Attempting to download it from CDN..."),window.hasOwnProperty("showdown"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;if(await this.addJs("https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js"),!window.hasOwnProperty("showdown"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Unable to load markdown parser 'SHOWDOWN':",e),console.error("Unable to load markdown parser 'showdown': "+e),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!1}break;case"commonmark":if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Asserting parser 'COMMONMARK's existence..."),window.hasOwnProperty("markdownit"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] 'COMMONMARK' already exists."),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;this.debug("[EVENT_METHOD] [APPLY] [eMP] 'COMMONMARK' does not exist.");try{this.debug("[EVENT_METHOD] [APPLY] [eMP] Attempting to load local copy of 'COMMONMARK'..."),await this.addJs(`${this.parserRoot.endsWith("/")?this.parserRoot.slice(0,-1):this.parserRoot}/commonmark/markdown-it.min.js`).catch(e=>{throw e})}catch(e){if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Local copy of 'COMMONMARK' does not exist. Attempting to download it from CDN..."),window.hasOwnProperty("markdownit"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;if(await this.addJs("https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js"),!window.hasOwnProperty("markdownit"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Unable to load markdown parser 'COMMONMARK':",e),console.error('Unable to load markdown parser "markdown-it": '+e),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!1}break;case"marked":if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Asserting parser 'MARKED's existence..."),window.hasOwnProperty("marked"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] 'MARKED' already exists."),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;this.debug("[EVENT_METHOD] [APPLY] [eMP] 'MARKED' does not exist.");try{await this.addJs(`${this.parserRoot.endsWith("/")?this.parserRoot.slice(0,-1):this.parserRoot}/marked/marked.min.js`).catch(e=>{throw e})}catch(e){if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Local copy of 'MARKED' does not exist. Attempting to download it from CDN..."),window.hasOwnProperty("marked"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;if(await this.addJs("https://cdn.jsdelivr.net/npm/marked/marked.min.js"),this.debug("[EVENT_METHOD] [APPLY] [eMP] Unable to load markdown parser 'MARKED':",e),!window.hasOwnProperty("marked"))return console.error('Unable to load markdown parser "marked": '+e),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!1}break;case"DOMPurify":if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Asserting parser 'DOMPurify's existence..."),window.hasOwnProperty("DOMPurify"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] 'DOMPurify' already exists."),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;try{this.debug("[EVENT_METHOD] [APPLY] [eMP] 'DOMPurify' does not exist."),await this.addJs(`${this.parserRoot.endsWith("/")?this.parserRoot.slice(0,-1):this.parserRoot}/DOMPurify/purify.min.js`).catch(e=>{throw e})}catch(e){if(this.debug("[EVENT_METHOD] [APPLY] [eMP] Local copy of 'DOMPurify' does not exist. Attempting to download it from CDN..."),window.hasOwnProperty("DOMPurify"))return this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!0;if(await this.addJs("https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"),this.debug("[EVENT_METHOD] [APPLY] [eMP] Unable to load markdown parser 'DOMPurify':",e),!window.hasOwnProperty("DOMPurify"))return console.error('Unable to load markdown parser addon "DOMPurify": '+e),this.debug("[EVENT_METHOD] [APPLY] [eMP] Finished"),!1}}}sanitizeHTML(e){this.debug("[EVENT_METHOD] [HEAD] [sH] sanitizeHTML");e=DOMPurify.sanitize(e);return this.debug("[EVENT_METHOD] [APPLY] [sH] Finished"),e}async generateMarkdown(){this.debug("[EVENT_METHOD] [HEAD] [GM] generateMarkdown");var e=this.flavor;let t=this.input,i=this.shadow.querySelector("div[md-tag-role='display']");switch(t&&i||(this.generateFields(),t="",i=this.shadow.querySelector("div[md-tag-role='display']")),await this.ensureMarkdownParser("DOMPurify"),this.debug("[EVENT_METHOD] [APPLY] [GM] Attempting to parse Markdown"),e){case"commonmark":{this.debug("[EVENT_METHOD] [APPLY] [GM] Markdown parser: COMMONMARK"),await this.ensureMarkdownParser("commonmark");var s=this.sanitizeHTML(t);this.debug("[EVENT_METHOD] [APPLY] [GM] Prepared Input:",t),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitized HTML:",s),this.debug("[EVENT_METHOD] [APPLY] [GM] Generating markdown...");const n=window.markdownit();s=n.render(s);this.debug("[EVENT_METHOD] [APPLY] [GM] Generated Markdown:\n",s),i.innerHTML=s,this.debug("[EVENT_METHOD] [APPLY] [GM] Finished");break}case"marked":this.debug("[EVENT_METHOD] [APPLY] [GM] Markdown parser: MARKED"),await this.ensureMarkdownParser("marked"),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitizing input...");s=this.sanitizeHTML(t),s=(this.debug("[EVENT_METHOD] [APPLY] [GM] Prepared Input:",t),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitized HTML:",s),this.debug("[EVENT_METHOD] [APPLY] [GM] Generating markdown..."),window.marked.parse(s));this.debug("[EVENT_METHOD] [APPLY] [GM] Generated Markdown:\n",s),i.innerHTML=s,this.debug("[EVENT_METHOD] [APPLY] [GM] Finished");break;case"github":{this.debug("[EVENT_METHOD] [APPLY] [GM] Markdown parser: SHOWDOWN + GITHUB CSS");s="https://cdn.jsdelivr.net/gh/MarketingPipeline/Markdown-Elements/stylesheets/github_md.css";this.assertStyleSheet(s)||this.addCss(s),await this.ensureMarkdownParser("showdown");const r=new window.showdown.Converter;r.setOption("tables","on"),r.setOption("emoji","on"),r.setOption("strikethrough","on"),r.setOption("tasklists","true"),r.setOption("ghMentions","true"),r.setOption("simplifiedAutoLink","true"),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitizing input...");s=this.sanitizeHTML(t),s=(this.debug("[EVENT_METHOD] [APPLY] [GM] Prepared Input:",t),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitized HTML:",s),this.debug("[EVENT_METHOD] [APPLY] [GM] Generating markdown..."),r.makeHtml(s));this.debug("[EVENT_METHOD] [APPLY] [GM] Applying Github CSS...");const d=document.createElement("github-md");d.innerHTML=s,this.debug("[EVENT_METHOD] [APPLY] [GM] Generated Markdown:\n",s),i.innerHTML="",i.appendChild(d),this.debug("[EVENT_METHOD] [APPLY] [GM] Finished");break}default:{this.debug("[EVENT_METHOD] [APPLY] [GM] Markdown parser: SHOWDOWN"),await this.ensureMarkdownParser("showdown");const o=new window.showdown.Converter;o.setOption("tables","on"),o.setOption("emoji","on"),o.setOption("strikethrough","on"),o.setOption("tasklists","true"),o.setOption("ghMentions","true"),o.setOption("simplifiedAutoLink","true"),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitizing input...");s=this.sanitizeHTML(t),s=(this.debug("[EVENT_METHOD] [APPLY] [GM] Prepared Input:",t),this.debug("[EVENT_METHOD] [APPLY] [GM] Sanitized HTML:",s),this.debug("[EVENT_METHOD] [APPLY] [GM] Generating markdown..."),o.makeHtml(s));this.debug("[EVENT_METHOD] [APPLY] [GM] Generated Markdown:\n",s),i.innerHTML=s,this.debug("[EVENT_METHOD] [APPLY] [GM] Finished")}}}generateFields(){this.debug("[EVENT_METHOD] [HEAD] [GF] generateFields");var e=this.shadow.querySelector("div[md-tag-role='display']");if(e)return this.debug("[EVENT_METHOD] [APPLY] [GF] Fields already exist."),void this.debug("[EVENT_METHOD] [APPLY] [GF] Finished");let t=document.createElement("div");e||(t.setAttribute("md-tag-role","display"),t.style.display="block"),e||this.shadow.appendChild(t),this.debug("[EVENT_METHOD] [APPLY] [GF] Finished")}parsedCallback(){this.debug("[EVENT_METHOD] [HEAD] [PC] parsedCallback"),this.generateFields(),this.contentObserver=new MutationObserver(async(e,t)=>{this.debug("[EVENT] [HEAD] [CO] contentObserver"),await this.setInput(this.innerHTML),this.debug("[EVENT_METHOD] [APPLY] [CO] Finished")}),this.contentObserver.observe(this,{attributes:!0,characterData:!0,childList:!0,subtree:!0}),this.setInput(this.innerHTML),this.generated=!0,this.debug("[EVENT_METHOD] [APPLY] [PC] Finished")}static get observedAttributes(){return["flavor","parser_root","debug"]}_initDebugger(){var e;window?.mdtag?.webcomponent?.hasOwnProperty("debugger")&&(e=()=>{const e=new window.mdtag.webcomponent.debugger;e.componentID=this.componentID,this.debugger=e},this.debugger&&this.debugger instanceof window.mdtag.webcomponent.debugger||e())}debug(...e){if(!0===this.debugEnabled){if(!window.mdtag?.webcomponent?.hasOwnProperty("debugger"))throw new Error(`[${this.componentID}] Could not log debug message: MarkdownTag Debugger not installed.`);this._initDebugger(),this.debugger.log(`[${this.componentID}]`,...e)}}getLogs(e){if(!0===this.debugEnabled){if(window.mdtag?.webcomponent?.hasOwnProperty("debugger")){this._initDebugger();const t=this.debugger.getLogs();return e?(console.log("Click anywhere outside of the Devtools within 3 seconds..."),setTimeout(()=>this.debugger.copyTextToClipboard(t),3e3),!0):t}throw new Error(`[${this.componentID}] Could not get loggers: MarkdownTag Debugger not installed.`)}}_isPathAbsolute(e){return/^(?:\/|[a-z]+:\/\/)/.test(e)}}window.mdtag||(window.mdtag={}),window.mdtag.webcomponent||(window.mdtag.webcomponent={}),window.mdtag.webcomponent.MDTag||(window.mdtag.webcomponent.MDTag=t),window.customElements.define("md-tag",t)}
//# sourceMappingURL=markdown-tag-wc.js.map