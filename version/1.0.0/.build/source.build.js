/*
Source code builder file.

DO NOT EDIT THIS FILE.
To edit options, see '.build.js'
*/

const UglifyJS = require("./lib/uglify-js/tools/node")
const { performance } = require("perf_hooks")
const { readFile, writeFile } = require("fs/promises")

const { resolve, join, sep, dirname, extname, basename } = require('path');
const { readdir, mkdir, copyFile } = require('fs').promises;
const { existsSync } = require('fs');

const mdVersion = basename(resolve(join(__dirname, "../")))

async function sourceBuilder(options) {
	const distDir = options.distDir || 'dist'
	const srcDir = options.srctDir || 'src'
	const validExts = [".js", ".mjs", ".cjs"]
	const srcFileCount = {
		total: 0,
		succeeded: 0,
		failed: 0
	}

	async function getFiles(dir) {
		const dirents = await readdir(dir, { withFileTypes: true });
		const files = await Promise.all(dirents.map((dirent) => {
			const res = resolve(dir, dirent.name);
			return dirent.isDirectory() ? getFiles(res) : res;
		}));
		return Array.prototype.concat(...files);
	}

	//(async () => {
	let root = join(__dirname || process.cwd(), "../")
	let basePath = resolve(join(root, srcDir))

	console.log(consoleColors.blue("READING SOURCE CODE DIRECTORY"))
	let originals = await getFiles(basePath)
	console.log(consoleColors.green("SUCCESSFULLY READ SOURCE CODE DIRECTORY"))

	console.log(consoleColors.blue("READING SOURCE FILES PRESENT ON THE SOURCE CODE DIRECTORY"))
	//originals.forEach(async orig => {
	for (const orig of originals) {
		console.log(consoleColors.blue(["ATTEMPTING TO BUILD SOURCE FILE LOCATED AT", orig].join(" ")))
		srcFileCount.total++

		let _srcFile = orig.replace(basePath, '')
		let srcFile = _srcFile.startsWith(sep) ? _srcFile.replace(sep, '') : _srcFile
		let reflectedFile = resolve(join(root, distDir, srcFile))
		let reflectedDirName = dirname(reflectedFile)

		console.log(consoleColors.magenta("ASSERTING SOURCE FILE VALIDITY"))
		if (!validExts.includes(extname(reflectedFile))) {
			//console.warn(consoleColors.red(`Could not build asset ${reflectedFile}: Asset is a source code file.`))
			return;
		}
		console.log(consoleColors.green("Source file is valid."))

		if (!existsSync(reflectedDirName)) {
			console.warn(consoleColors.yellow(`${reflectedDirName} does not exist, creating ${reflectedDirName}.`))
			await mkdir(reflectedDirName, {
				recursive: true
			})
		}

		console.log(consoleColors.magenta(["ATTEMPTING TO BUILD SOURCE FILE LOCATED AT", orig, "TO", reflectedFile].join(" ")))
		//await copyFile(orig, reflectedFile)
		const data = await readFile(orig, { encoding: "utf8" })
		if (data) {
			try {
				const options = {
					toplevel: true,
					compress: {
						global_defs: {},
						passes: 2
					},
					sourceMap: {
						filename: `${basename(orig)}`,
						url: `${basename(orig)}.map`
					},
					output: {
						beautify: false,
						preamble: `/* MarkdownTag v${mdVersion} - Built at: ${new Date().toISOString()} */`
					}
				}

				const compressed = UglifyJS.minify(data, options)
				if (compressed.error) {
					console.log(consoleColors.red(["Unable to build source file located at", orig, ":", compressed.error].join(" ")))
				} else {
					await writeFile(reflectedFile, compressed.code, { encoding: "utf8" })
					await writeFile(`${reflectedFile}.map`, compressed.map, { encoding: "utf8" })

					srcFileCount.succeeded++
					console.log(consoleColors.green(["Successfully built source file located at", orig].join(" ")))
					continue;
				}
			} catch(e) {
				console.log(consoleColors.red(["Unable to build source file located at", orig, ":", e].join(" ")))
			}
		} else {
			console.log(consoleColors.red(["Unable to build source file located at", orig, ": Source file is empty."].join(" ")))
		}

		srcFileCount.failed++
	}//})

	return { srcFileCount: srcFileCount }
	//})()
}

async function init(options) {
	console.log(consoleColors.white(" --------------- SOURCE BUILDER ---------------"))

	const perf_start = performance.now()
	const { srcFileCount } = await sourceBuilder(options)
	const perf_stop = performance.now()

	console.log(consoleColors.cyan(`Finished building ${srcFileCount.total} source files (${srcFileCount.succeeded} succeeded, ${srcFileCount.failed} failed) in ${perf_stop - perf_start}ms`))

	console.log(consoleColors.white(" ----------- SOURCE BUILDER FINISHED ----------"))
}

module.exports.init = init